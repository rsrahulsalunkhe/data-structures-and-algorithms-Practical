Name : Rahul Suryakant Salunkhe
Class : MCA sem - II
Roll No. : 55
                                                                              
Program : Implementation of programs based on Obtaining Shortest Path (Dijkstra).
                                                                               
#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
using namespace std;

const int INF = 1e9;

void dijkstra(int startNode, unordered_map<int, vector<pair<int, int>>>& adjList, vector<int>& distances) {
    int n = adjList.size();
    distances.assign(n, INF);

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, startNode});
    distances[startNode] = 0;

    while (!pq.empty()) {
        int u = pq.top().second;
        int dist_u = pq.top().first;
        pq.pop();

        if (dist_u > distances[u]) continue;

        for (const auto& neighbor : adjList[u]) {
            int v = neighbor.first;
            int weight = neighbor.second;

            if (distances[u] + weight < distances[v]) {
                distances[v] = distances[u] + weight;
                pq.push({distances[v], v});
            }
        }
    }
}

void addEdge(unordered_map<int, vector<pair<int, int>>>& adjList, int u, int v, int weight) {
    adjList[u].push_back({v, weight});
    adjList[v].push_back({u, weight});
}

void buildGraph(unordered_map<int, vector<pair<int, int>>>& adjList) {
    int n, m; 
    cout << "Enter the number of nodes in the graph: ";
    cin >> n;
    cout << "Enter the number of edges in the graph: ";
    cin >> m;

    cout << "Enter " << m << " edges (u v weight format, 0-based indexing):" << endl;
    for (int i = 0; i < m; i++) {
        int u, v, weight;
        cin >> u >> v >> weight;
        addEdge(adjList, u, v, weight);
    }
}

int main() {
    unordered_map<int, vector<pair<int, int>>> adjList;
    buildGraph(adjList);

    int startNode;
    cout << "Enter the starting node for Dijkstra's algorithm: ";
    cin >> startNode;

    int totalNodes = adjList.size();
    vector<int> distances(totalNodes, INF);

    dijkstra(startNode, adjList, distances);

    cout << "Shortest distances from node " << startNode << " to all other nodes:" << endl;
    for (int i = 0; i < totalNodes; i++) {
        if (distances[i] == INF)
            cout << "Node " << i << ": Not reachable" << endl;
        else
            cout << "Node " << i << ": " << distances[i] << endl;
    }

    return 0;
}
                                                                              
Output :
Enter the number of nodes in the graph: 6
Enter the number of edges in the graph: 5
Enter 5 edges (u v weight format, 0-based indexing):
1 2
1 4
0 3
5 2
4 3
2 1
0 2
3 1
Enter the starting node for Dijkstra's algorithm: Shortest distances from node 1 to all other nodes:
Node 0: 4
Node 1: 0
Node 2: 1
Node 3: 2
Node 4: 7
Node 5: 5